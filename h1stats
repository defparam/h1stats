#!/usr/bin/python3
#
# h1stats is a tool that compiles a csv of all h1 program stats
#
# Authors: defparam
#
# MIT License
# 
# Copyright (c) 2021 defparam
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys
import requests
import base64
import json
from datetime import datetime

def diff_month(d1, d2):
    return (d1.year - d2.year) * 12 + d1.month - d2.month

def get_h1_graphql_token(hostsession):
    hdrs = {"Cookie": "__Host-session="+hostsession,
    "Content-type": "application/json", 
    "Host": "hackerone.com",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)",
    "Accept": "*/*"}
    resp = requests.get('https://hackerone.com/current_user/graphql_token',headers=hdrs)
    jsn = json.loads(resp.text)
    if (jsn['graphql_token'] == "----"):
        print("[+] Warning: could not obtain graphql token from session, reverting to public only...")
        return None
    return jsn['graphql_token']

def get_programinfo(token):
    H1_XAUTH_TOKEN = token
    PRIV_PROG_QUERY = "ewogICAgIm9wZXJhdGlvbk5hbWUiOiAiTXlQcm9ncmFtc1F1ZXJ5IiwKICAgICJ2YXJpYWJsZXMiOiB7CiAgICAgICAgIndoZXJlIjp7InN1Ym1pc3Npb25fc3RhdGUiOnsiX2VxIjoib3BlbiJ9fSwKICAgICAgICAiY291bnQiOiA1MCwKICAgICAgICAib3JkZXJCeSI6IG51bGwsCiAgICAgICAgInNlY3VyZU9yZGVyQnkiOiB7CiAgICAgICAgICAgICJzdGFydGVkX2FjY2VwdGluZ19hdCI6IHsKICAgICAgICAgICAgICAgICJfZGlyZWN0aW9uIjogIkRFU0MiCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjdXJzb3IiOiAiIgogICAgfSwKICAgICJxdWVyeSI6ICJxdWVyeSBNeVByb2dyYW1zUXVlcnkoJGN1cnNvcjogU3RyaW5nLCAkY291bnQ6IEludCwgJHdoZXJlOiBGaWx0ZXJzVGVhbUZpbHRlcklucHV0LCAkb3JkZXJCeTogVGVhbU9yZGVySW5wdXQsICRzZWN1cmVPcmRlckJ5OiBGaWx0ZXJzVGVhbUZpbHRlck9yZGVyKSB7XG4gIG1lIHtcbiAgICBpZFxuICAgIC4uLk15SGFja2VyT25lU3ViSGVhZGVyXG4gICAgX190eXBlbmFtZVxuICB9XG4gIHRlYW1zKGZpcnN0OiAkY291bnQsIGFmdGVyOiAkY3Vyc29yLCBvcmRlcl9ieTogJG9yZGVyQnksIHNlY3VyZV9vcmRlcl9ieTogJHNlY3VyZU9yZGVyQnksIHdoZXJlOiAkd2hlcmUpIHtcbiAgICBwYWdlSW5mbyB7XG4gICAgICBlbmRDdXJzb3JcbiAgICAgIGhhc05leHRQYWdlXG4gICAgICBfX3R5cGVuYW1lXG4gICAgfVxuICAgIGVkZ2VzIHtcbiAgICAgIGN1cnNvclxuICAgICAgbm9kZSB7XG4gICAgICAgIGlkXG4gICAgICAgIGhhbmRsZVxuICAgICAgICBuYW1lXG4gICAgICAgIGN1cnJlbmN5XG4gICAgICAgIHRlYW1fcHJvZmlsZV9waWN0dXJlOiBwcm9maWxlX3BpY3R1cmUoc2l6ZTogbWVkaXVtKVxuICAgICAgICBzdWJtaXNzaW9uX3N0YXRlXG4gICAgICAgIHRyaWFnZV9hY3RpdmVcbiAgICAgICAgdXJsXG4gICAgICAgIG9mZmVyc19ib3VudGllc1xuICAgICAgICBhdmVyYWdlX2JvdW50eV9sb3dlcl9hbW91bnRcbiAgICAgICAgYXZlcmFnZV9ib3VudHlfdXBwZXJfYW1vdW50XG4gICAgICAgIHRvcF9ib3VudHlfbG93ZXJfYW1vdW50XG4gICAgICAgIHRvcF9ib3VudHlfdXBwZXJfYW1vdW50XG4gICAgICAgIGZvcm1hdHRlZF90b3RhbF9ib3VudGllc19wYWlkX3ByZWZpeFxuICAgICAgICBmb3JtYXR0ZWRfdG90YWxfYm91bnRpZXNfcGFpZF9hbW91bnRcbiAgICAgICAgcmVzb2x2ZWRfcmVwb3J0X2NvdW50XG4gICAgICAgIGZvcm1hdHRlZF9ib3VudGllc19wYWlkX2xhc3RfOTBfZGF5c1xuICAgICAgICByZXBvcnRzX3JlY2VpdmVkX2xhc3RfOTBfZGF5c1xuICAgICAgICBsYXN0X3JlcG9ydF9yZXNvbHZlZF9hdFxuIG1vc3RfcmVjZW50X3NsYV9zbmFwc2hvdCB7XG4gICAgaWRcbiAgICBmaXJzdF9yZXNwb25zZV90aW1lOiBhdmVyYWdlX3RpbWVfdG9fZmlyc3RfcHJvZ3JhbV9yZXNwb25zZVxuICAgIHRyaWFnZV90aW1lOiBhdmVyYWdlX3RpbWVfdG9fcmVwb3J0X3RyaWFnZVxuICAgIGJvdW50eV90aW1lOiBhdmVyYWdlX3RpbWVfdG9fYm91bnR5X2F3YXJkZWRcbiAgICByZXNvbHV0aW9uX3RpbWU6IGF2ZXJhZ2VfdGltZV90b19yZXBvcnRfcmVzb2x2ZWRcbiAgICBfX3R5cGVuYW1lXG4gIH1cbiAgICAgICAgb25seV9jbGVhcmVkX2hhY2tlcnNcbiAgICAgICAgc3RhdGVcbiAgICAgICAgc3RhcnRlZF9hY2NlcHRpbmdfYXRcbiAgICAgICAgbnVtYmVyX29mX3JlcG9ydHNfZm9yX3VzZXJcbiAgICAgICAgbnVtYmVyX29mX3ZhbGlkX3JlcG9ydHNfZm9yX3VzZXJcbiAgICAgICAgYm91bnR5X2Vhcm5lZF9mb3JfdXNlclxuICAgICAgICBsYXN0X2ludml0YXRpb25fYWNjZXB0ZWRfYXRfZm9yX3VzZXJcbiAgICAgICAgYm9va21hcmtlZFxuICAgICAgICBleHRlcm5hbF9wcm9ncmFtIHtcbiAgICAgICAgICBpZFxuICAgICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgfVxuICAgICAgICAuLi5UZWFtTGlua1dpdGhNaW5pUHJvZmlsZVxuICAgICAgICAuLi5UZWFtVGFibGVBdmVyYWdlQm91bnR5XG4gICAgICAgIC4uLkJvdW50eVRhYmxlVGVhbVxuICAgICAgICAuLi5UZWFtVGFibGVNaW5pbXVtQm91bnR5XG4gICAgICAgIC4uLlRlYW1UYWJsZVJlc29sdmVkUmVwb3J0c1xuICAgICAgICBfX3R5cGVuYW1lXG4gICAgICB9XG4gICAgICBfX3R5cGVuYW1lXG4gICAgfVxuICAgIF9fdHlwZW5hbWVcbiAgfVxufVxuXG5mcmFnbWVudCBCb3VudHlUYWJsZVRlYW0gb24gVGVhbSB7XG4gIGlkXG4gIGhhbmRsZVxuICBib3VudHlfdGFibGUge1xuICAgIGlkXG4gICAgbG93X2xhYmVsXG4gICAgbWVkaXVtX2xhYmVsXG4gICAgaGlnaF9sYWJlbFxuICAgIGNyaXRpY2FsX2xhYmVsXG4gICAgZGVzY3JpcHRpb25cbiAgICBib3VudHlfdGFibGVfcm93cyhmaXJzdDogMTAwKSB7XG4gICAgICBlZGdlcyB7XG4gICAgICAgIG5vZGUge1xuICAgICAgICAgIGlkXG4gICAgICAgICAgbG93XG4gICAgICAgICAgbWVkaXVtXG4gICAgICAgICAgaGlnaFxuICAgICAgICAgIGNyaXRpY2FsXG4gICAgICAgICAgc21hcnRfcmV3YXJkc19zdGFydF9hdFxuICAgICAgICAgIHN0cnVjdHVyZWRfc2NvcGUge1xuICAgICAgICAgICAgaWRcbiAgICAgICAgICAgIGFzc2V0X2lkZW50aWZpZXJcbiAgICAgICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlZF9hdFxuICAgICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgfVxuICAgICAgICBfX3R5cGVuYW1lXG4gICAgICB9XG4gICAgICBfX3R5cGVuYW1lXG4gICAgfVxuICAgIHVwZGF0ZWRfYXRcbiAgICBfX3R5cGVuYW1lXG4gIH1cbiAgX190eXBlbmFtZVxufVxuXG5cblxuZnJhZ21lbnQgVGVhbUxpbmtXaXRoTWluaVByb2ZpbGUgb24gVGVhbSB7XG4gIGlkXG4gIGhhbmRsZVxuICBuYW1lXG4gIF9fdHlwZW5hbWVcbn1cblxuZnJhZ21lbnQgVGVhbVRhYmxlQXZlcmFnZUJvdW50eSBvbiBUZWFtIHtcbiAgaWRcbiAgY3VycmVuY3lcbiAgYXZlcmFnZV9ib3VudHlfbG93ZXJfYW1vdW50XG4gIGF2ZXJhZ2VfYm91bnR5X3VwcGVyX2Ftb3VudFxuICBfX3R5cGVuYW1lXG59XG5cbmZyYWdtZW50IFRlYW1UYWJsZU1pbmltdW1Cb3VudHkgb24gVGVhbSB7XG4gIGlkXG4gIGN1cnJlbmN5XG4gIGJhc2VfYm91bnR5XG4gIF9fdHlwZW5hbWVcbn1cblxuZnJhZ21lbnQgVGVhbVRhYmxlUmVzb2x2ZWRSZXBvcnRzIG9uIFRlYW0ge1xuICBpZFxuICByZXNvbHZlZF9yZXBvcnRfY291bnRcbiAgX190eXBlbmFtZVxufVxuXG5mcmFnbWVudCBNeUhhY2tlck9uZVN1YkhlYWRlciBvbiBVc2VyIHtcbiAgaWRcbiAgaGFzX2NoZWNrbGlzdF9jaGVja19yZXNwb25zZXNcbiAgc29mdF9sYXVuY2hfaW52aXRhdGlvbnMoc3RhdGU6IG9wZW4pIHtcbiAgICB0b3RhbF9jb3VudFxuICAgIF9fdHlwZW5hbWVcbiAgfVxuICBfX3R5cGVuYW1lXG59XG4iCn0="    
    query = json.loads(base64.b64decode(PRIV_PROG_QUERY).decode('utf-8'))
    last_cursor = ""
    
    if H1_XAUTH_TOKEN == None:
        hdrs = {"Content-type": "application/json", 
            "Host": "hackerone.com",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)",
            "Accept": "*/*"}
    else:
        hdrs = {"X-Auth-Token": H1_XAUTH_TOKEN,
            "Content-type": "application/json", 
            "Host": "hackerone.com",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)",
            "Accept": "*/*"}        
        
    print("[+] Please wait... (this may take several minutes)")
    print("[+] Collecting...\r", flush=1, end='')
    
    now = datetime.now()
    if H1_XAUTH_TOKEN == None:
        filename = "h1stats-%s-%s-%s.csv"%(str(now.year),str(now.month),str(now.day))
    else:
        filename = "h1stats-PRIVATE-%s-%s-%s.csv"%(str(now.year),str(now.month),str(now.day))
        
    with open(filename,"w") as f:
        f.write("Program Name,URL,Program Type,Clear Program,Offers Bounties,Max Critical,Max High,Max Medium,Max Low,Average Bounty Max,Average Bounty Min,Top Bounty Max,Top Bounty Min,Resolved Reports,Reports Received in 90 Days,Total Bounties Paid (USD),Total Bounties Paid in 90 Days (USD),Avg Time to First Response (Hours),Avg Time to Triage (Hours),Avg Time to Bounty (Hours),Avg Time to Resolution (Hours),Progam Age (Months),Days Since Last Report\n")
        progcount = 0
        while(1):
            query["variables"]["cursor"] = last_cursor
            
            resp = requests.post('https://hackerone.com/graphql',headers=hdrs,data=json.dumps(query))
            data = json.loads(resp.text)
            progcount += len(data["data"]["teams"]["edges"])
            print("[+] Collecting... (%d programs)                              \r"%(progcount), flush=1, end='')
            
            if len(data["data"]["teams"]["edges"]) == 0:
                print("\n[+] Wrote all data to: %s"%filename)
                if H1_XAUTH_TOKEN != None:
                    print("[+] Warning: this data contains private information under NDA, do not publish!")
                print("[+] Done!")
                break
             
            for edge in data["data"]["teams"]["edges"]:
                last_cursor = edge["cursor"]
                url = edge["node"]["url"]
                name = edge["node"]["name"].replace(',','.')
                clear = "No"
                if edge["node"]["only_cleared_hackers"]:
                    clear = "Yes"
                    
                state = "PRIVATE"
                if edge["node"]["state"] == "public_mode":
                    state = "Public"
                
                maxcrit = "0"
                maxhigh = "0"
                maxmed = "0"
                maxlow = "0"
                if edge["node"]["bounty_table"] != None:
                    for reward in edge["node"]["bounty_table"]["bounty_table_rows"]["edges"]:
                        if reward["node"]["critical"] != None:
                            if int(reward["node"]["critical"]) > int(maxcrit):
                                maxcrit = reward["node"]["critical"]
                        if reward["node"]["high"] != None:
                            if int(reward["node"]["high"]) > int(maxhigh):
                                maxhigh = reward["node"]["high"]
                        if reward["node"]["medium"] != None:
                            if int(reward["node"]["medium"]) > int(maxmed):
                                maxmed = reward["node"]["medium"]
                        if reward["node"]["low"] != None:
                            if int(reward["node"]["low"]) > int(maxlow):
                                maxlow = reward["node"]["low"]
                if edge["node"]["average_bounty_lower_amount"] != None:
                    abla = str(edge["node"]["average_bounty_lower_amount"])
                else:
                    abla = "0"
                    
                if edge["node"]["average_bounty_upper_amount"] != None:
                    abua = str(edge["node"]["average_bounty_upper_amount"])
                else:
                    abua = "0"
                    
                if edge["node"]["top_bounty_lower_amount"] != None:
                    tbla = str(edge["node"]["top_bounty_lower_amount"])
                else:
                    tbla = "0"
                    
                if edge["node"]["top_bounty_upper_amount"] != None:
                    tbua = str(edge["node"]["top_bounty_upper_amount"])
                else:
                    tbua = "0"
                    
                if edge["node"]["formatted_total_bounties_paid_amount"] != None:
                    tbp = str(edge["node"]["formatted_total_bounties_paid_amount"])
                else:
                    tbp = "0"
                    
                if edge["node"]["formatted_bounties_paid_last_90_days"] != None:
                    tbp90 = str(edge["node"]["formatted_bounties_paid_last_90_days"])
                else:
                    tbp90 = "0"
                    
                    
                if edge["node"]["most_recent_sla_snapshot"]["first_response_time"] != None:
                    frt = str(edge["node"]["most_recent_sla_snapshot"]["first_response_time"])
                else:
                    frt = "0.0"
                    
                if edge["node"]["most_recent_sla_snapshot"]["triage_time"] != None:
                    tt = str(edge["node"]["most_recent_sla_snapshot"]["triage_time"])
                else:
                    tt = "0.0"
                    
                if edge["node"]["most_recent_sla_snapshot"]["bounty_time"] != None:
                    bt = str(edge["node"]["most_recent_sla_snapshot"]["bounty_time"])
                else:
                    bt = "0.0"
                    
                if edge["node"]["most_recent_sla_snapshot"]["resolution_time"] != None:
                    rt = str(edge["node"]["most_recent_sla_snapshot"]["resolution_time"])
                else:
                    rt = "0.0"
                    
                    
                rrc = edge["node"]["resolved_report_count"]
                if rrc == None:
                    rrc = 0
                    
                rrc90 = edge["node"]["reports_received_last_90_days"]
                if rrc90 == None:
                    rrc90 = 0
                    
                offers = "No"
                if edge["node"]["offers_bounties"]:
                    offers = "Yes"
                    
                started_accepting_at    = edge["node"]["started_accepting_at"][0:10]
                terms = started_accepting_at.split('-')
                progage = str(diff_month(datetime.now(), datetime(int(terms[0]),int(terms[1]),int(terms[2]))))
                    
                try:    
                    last_report_resolved_at    = edge["node"]["last_report_resolved_at"][0:10]
                    terms = last_report_resolved_at.split('-')
                    dslr = str((datetime.now() - datetime(int(terms[0]),int(terms[1]),int(terms[2]))).days)
                except:
                    dslr = "N/A"
                
                f.write("%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n"%(name,url,state,clear,offers,maxcrit,maxhigh,maxmed,maxlow,abua,abla,tbua,tbla,rrc,rrc90,tbp,tbp90,frt,tt,bt,rt,progage,dslr))
        
        
            


if __name__ == "__main__":
    print("  _     _ ____  _        _       ")
    print(" | |__ / / ___|| |_ __ _| |_ ___ ")
    print(" | '_ \| \___ \| __/ _` | __/ __|")
    print(" | | | | |___) | || (_| | |_\__ \\")
    print(" |_| |_|_|____/ \__\__,_|\__|___/")
    print("")
    print("                      defparam   ")
    print("")

    if len(sys.argv) == 1:
        print("[+] No session cookie specified")
        print("[+] Collecting public data...")
        graphql_token = None
    else:
        host_session_token = sys.argv[1]
        print("[+] Using specified session cookie")
        print("[+] Collecting public and private data...")
        graphql_token = get_h1_graphql_token(host_session_token)
        
    get_programinfo(graphql_token)
